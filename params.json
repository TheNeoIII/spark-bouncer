{"name":"spark-bouncer","tagline":"RFID + Spark Core based door access control system with full cloud immersion","body":"# spark-bouncer\r\n![spark-bouncer logo](http://se.esse.es/spark-bouncer.jpg)\r\n\r\n## Overview\r\n**spark-bouncer** is a security focused door access control system built on top of the [Spark Core](http://docs.spark.io/hardware/) platform.\r\n\r\nIt utilizes the [user flash memory](http://docs.spark.io/hardware/#subsystems-external-flash) to juggle up to 3000 RFID keys. Configuration happens via cloud based [function calls](http://docs.spark.io/api/#basic-functions-controlling-a-core).\r\n\r\nSecurity is provided by [One-time passwords](https://en.wikipedia.org/wiki/One-time_password) for each key usage, making your door immune against serial number [spoofing attacks](http://www.instructables.com/id/RFID-Emulator-How-to-Clone-RFID-Card-Tag-/).\r\n\r\nYour team is allowed to get in early, the crowd a bit later? No worries, the **spark-bouncer** keeps an eye on precise timing!\r\n\r\nYou plan to embed a flexible door access control into your existing infrastructure? The **spark-bouncer** is API driven!\r\n\r\nHook yourself into the live log [event stream](http://docs.spark.io/api/#subscribing-to-events) or query its persistently stored [Circular Buffer](https://en.wikipedia.org/wiki/Circular_buffer).\r\n\r\nConnect a [relay](http://www.exp-tech.de/Shields/Seeed-Studio-Grove-Relay.html) to your [electric strike](https://en.wikipedia.org/wiki/Electric_strike) and place a [button](https://openclipart.org/image/300px/svg_to_png/190592/hot_button.png) on the inside to manually open the door, gentleman style.\r\n\r\nBuzzing yourself in is just an API call away.\r\n\r\n## Hardware\r\n* [Spark Core](https://www.spark.io/) [via [Spark Store](https://www.spark.io/store)]\r\n* [MF RC522 module](http://community.spark.io/t/getting-the-rfid-rc522-to-work/3571) [via [eBay](http://www.ebay.com/sch/i.html?_nkw=rc522)]\r\n* Relay [via [EXP Tech](http://www.exp-tech.de/Shields/Seeed-Studio-Grove-Relay.html)]\r\n* Door with an [electric strike](https://en.wikipedia.org/wiki/Electric_strike) [via [eBay](http://www.ebay.com/sch/i.html?_nkw=electronic+door+strike&_sop=15)]\r\n\r\n## Get started\r\nBreadboard the parts together as described in the [header](https://github.com/rastapasta/spark-bouncer/blob/master/application.cpp) and boot it up!\r\n\r\nThe code is currently optimized to locally compile outside of the cloud. If you just like to test it without a local environment, flash the included firmware.bin to skip the setup.\r\n\r\nIf it is the first time you are running the **spark-bouncer**, your flash memory needs to get initialized:\r\n```sh\r\n$ spark call [core-id] reset\r\n```\r\n\r\nHold a comptabile RFID key to the reader, nothing will happen - yet!\r\nQuery the log and store your key's serial number:\r\n\r\n```sh\r\n$ spark get [core-id] log\r\n123456;aa:bb:cc:dd;0\r\n$ spark call [core-id] update aa:bb:cc:dd;*;active,otp\r\n1\r\n```\r\nTry your RFID key again - the relay should make a happy noise.\r\n\r\nLet's see what has happened:\r\n```sh\r\n$ spark get [core-id] log\r\n123490;aa:bb:cc:dd;1\r\n123480;aa:bb:cc:dd;9\r\n123456;aa:bb:cc:dd;0\r\n```\r\nAfter the key wasn't found in the first place (NOT_FOUND), we updated it (UPDATED) - and granted access at the end (OPEN)!\r\n\r\n## Usage\r\n### Bouncer, let me in!\r\nBy calling the published **open** function, you'll get an instant buzz.\r\n\r\nExample:\r\n\r\n```sh\r\n$ spark call [core-id] open\r\n```\r\n\r\n### Configure RFID access\r\nThe **spark-bouncer** stores up to 3000 users, each being identified by their 4 to 10 bytes long [RFID serial numbers](https://en.wikipedia.org/wiki/Radio-frequency_identification#Tags).\r\n\r\n#### Store RFID key\r\nYou have to define whom to let in at which time. To do so, call the published **update** function with following argument:\r\n\r\n\t[key serial];[time restrictions];[flags]\r\n\r\nFormat used in the fields:\r\n\r\n* **key serial** -  aa:bb:cc[:...] - up to 10 hex values seperated by colons\r\n* **time restrictions**\r\n  * * -> open at all times\r\n  * **-** -> never open\r\n  * up to seven **4 byte hex values** to define specific valid hours per weekday\r\n* **flags** - comma seperated list, set to false if flag not present\r\n  * **otp** -> enable One Time Passwords for this key [**recommended**]\r\n  * **active** -> mark key as active - mandatory for getting in\r\n  * **lost** -> marks key as lost - won't get you in anymore\r\n  * **reset** -> resets the stored OTP in case something went wrong\r\n\r\nThe call returns\r\n\r\n* **1** if all went well\r\n* **-1** if the key couldn't get stored\r\n\r\nExample:\r\n\r\n```sh\r\n$ spark call [core-id] update \"aa:bb:cc:dd;*;active,otp\"\r\n```\r\n#### Time based access\r\n\r\nEach hour of a week day is mapped to a bit in a 4 byte long. Setting a bit to 1 grants access for the corresponding hour.\r\n\r\nExamples:\r\n\r\n* For the time between 16h and 17h, the 16th bit must be set (0x10000).\r\n* For full day access, set all bits to high (0xFFFFFFFF).\r\n* Grant access for all of Monday and Sunday, otherwise only buzz in between 16h-17h and 0h-4h on Tuesdays:\r\n\r\n```sh\r\n$ spark call [core-id] update \"aa:bb:cc:dd;FFFFFFFF 1000F 0 0 0 0 FFFFFFFF;active,otp\"\r\n```\r\n\r\n### Logging\r\n#### Data format\r\nAll logging data is returned as a semicolon seperated list. The included elements are:\r\n\r\n\t[timestamp];[key serial];[event code]\r\n\r\n#### Event codes\r\n\r\nCode | Event | Triggered when?\r\n-----|-------|----------------\r\n0 | NOT_FOUND | scanned RFID key is not stored yet\r\n1 | OPEN | door access granted\r\n2 | OUT_OF_HOURS | valid key but not good for now\r\n3 | DISABLED | usage of a key which is not flagged *active*\r\n4 | LOST | key is flagged as lost\r\n5 | OTP_MISSMATCH | possible highjack attempted, removes key's active flag\r\n8 | STORAGE_FULL | very unlikely, but yey, here's an error in case more than >3000 keys got stored\r\n9 | UPDATED | key data got updated via **update** call\r\n\r\n#### Subscribing to the live log\r\nThe **spark-bouncer** is publishing all key usages to the Spark Cloud [event system](http://docs.spark.io/api/#subscribing-to-events) as [private events](http://docs.spark.io/firmware/#spark-publish).\r\n\r\nExample subscription:\r\n\r\n```sh\r\n$ spark subsribe [core-id]\r\n```\r\n\r\nPublished events:\r\n\r\n* **card** - after key handling or updating, data based on *data format*\r\n* **button** - when manual buzzer button is pressed\r\n* **call** - when door is opened via the Spark Cloud\r\n\r\n#### Query the most recent events via the cloud\r\nThe Spark Cloud allows to [query](http://docs.spark.io/api/#reading-data-from-a-core-variables) runtime variables with a [maximal length](http://docs.spark.io/firmware/#spark-variable) of 622.\r\n\r\nThe **spark-bouncer** always keeps an internal buffer up to date with the most recent log entries.\r\n\r\nPublished variables:\r\n\r\n* **log** - containing as many descendingly ordered *data format* entries as it can hold.\r\n\r\nExample query:\r\n\r\n```sh\r\n$ spark get [core-id] log\r\n```\r\n\r\n### Debugging\r\nTo control the Spark Core's debug output, call the published **debug** function with either\r\n\r\n* **1** -> to **enable** serial debug output, or\r\n* **0** -> to **disable** serial debug output\r\n\r\nThe debug mode can be enabled by default in the top of the code.\r\n\r\nExample:\r\n\r\n```sh\r\n$ spark call [core-id] debug 1\r\n1\r\n$ spark serial monitor\r\nOpening serial monitor for com port: \"/dev/cu.usbmodemfa131\"\r\n[rfid] identifying f3:65:1d:bc\r\n[flash] Key found, index #0\r\n-- Active? yes\r\n-- Lost? no\r\n-- Times:\r\n          Monday   Tuesday  Wednesday  Thursday   Friday   Saturday   Sunday\r\n 0 h                                      *                               \r\n 1 h                                      *                               \r\n 2 h                                      *                               \r\n 3 h                                      *                               \r\n 4 h                                      *                               \r\n 5 h                                                                      \r\n 6 h                                                                      \r\n 7 h                                                                      \r\n 8 h                                                                      \r\n 9 h        *         *                                                   \r\n10 h        *         *                                                   \r\n11 h        *         *                                       *         * \r\n12 h        *         *                                       *         * \r\n13 h        *         *                                       *         * \r\n14 h        *         *                                       *         * \r\n15 h        *         *                                       *         * \r\n16 h        *         *                                       *         * \r\n17 h        *         *                                      (*)        * \r\n18 h        *         *                                       *         * \r\n19 h        *         *                                       *         * \r\n20 h        *         *         *                                         \r\n21 h                            *                                         \r\n22 h                            *                                         \r\n23 h                            *                                         \r\n\r\n-- last update of user configuration: Sat Sep 13 21:32:47 2014\r\n-- last seen: Sat Sep 13 21:44:06 2014\r\n\r\n-- OTP:      64 39 2C BC 4A F6 62 04 B1 FF 49 D0 58 2B F4 E3\r\nOTP on Chip: 64 39 2C BC 4A F6 62 04 B1 FF 49 D0 58 2B F4 E3\r\nNew OTP:     DA 29 14 1D 37 12 7D 56 04 84 24 A6 49 E0 CA 67\r\n[card] hours match, opening!\r\n[door] opening\r\n[door] closing\r\n```\r\n\r\n#### Reset storage\r\n\r\nBe careful, but if you need to reset your storage during development, call the published **reset** function. Your **spark-bouncer** will forget all he knew.\r\n\r\n**Recommended** to disable in production environments.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}